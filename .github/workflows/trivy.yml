#################################################################################
#  Copyright (c) 2024 T-Systems International GmbH
#  Copyright (c) 2021,2023 Contributors to the Eclipse Foundation
#
#  See the NOTICE file(s) distributed with this work for additional
#  information regarding copyright ownership.
#
#  This program and the accompanying materials are made available under the
#  terms of the Apache License, Version 2.0 which is available at
#  https://www.apache.org/licenses/LICENSE-2.0.
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations
#  under the License.
#
#  SPDX-License-Identifier: Apache-2.0
#################################################################################


---
name: "Trivy"

on:
  push:
    branches: [ main, releases ]
  pull_request:
    branches: [ main, releases ]
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:
  workflow_run:
    workflows: [ "Publish Artefacts" ]
    branches:
      - main
      - releases
      - release/*
      - hotfix/*
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
    types:
      - completed

jobs:
  git-sha7:
    name: Determine short git sha
    runs-on: ubuntu-latest
    outputs:
      value: ${{ steps.git-sha7.outputs.SHA7 }}
    steps:
      - name: Resolve git 7-chars sha
        id: git-sha7
        run: |
          echo "SHA7=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

  trivy-analyze-config:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@0.31.0
        with:
          scan-type: "config"
          exit-code: "0"
          hide-progress: false
          format: "sarif"
          output: "trivy-results-config.sarif"
          severity: "CRITICAL,HIGH"
#      - name: Upload Trivy scan results to GitHub Security tab
#        uses: actions/upload-artifact@v4
#        with:
#          sarif_file: "trivy-results-${{ matrix.image }}.sarif"

  trivy:
    needs: [ git-sha7 ]
    permissions:
      actions: read
      contents: read
      security-events: write
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # Continue scanning other images even if one fails
      matrix:
        image:
          - edc-runtime-memory
          - edc-controlplane-postgresql-hashicorp-vault
          - edc-dataplane-hashicorp-vault
    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to GHCR
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # Check if the image exists in GHCR
      - name: "Check if image exists"
        id: imageCheck
        run: |
          if docker manifest inspect ghcr.io/factory-x-contributions/${{ matrix.image }}:sha-${{ needs.git-sha7.outputs.value }} > /dev/null 2>&1; then
            echo "Image exists."
            exit 0
          else
            echo "Image does not exist."
            exit 1
          fi
        continue-on-error: true

      # Run Trivy only if the image exists
      - name: Run Trivy vulnerability scanner
        if: success() && steps.imageCheck.outcome != 'failure'
        uses: aquasecurity/trivy-action@0.31.0
        with:
          image-ref: "ghcr.io/factory-x-contributions/${{ matrix.image }}:sha-${{ needs.git-sha7.outputs.value }}"
          format: "sarif"
          output: "trivy-results-${{ matrix.image }}.sarif"
          exit-code: "0"
          severity: "CRITICAL,HIGH"
          timeout: "10m0s"

      - name: Upload Trivy scan results to GitHub Security tab
        if: success() && steps.imageCheck.outcome != 'failure'
        uses: actions/upload-artifact@v4
        with:
          sarif_file: "trivy-results-${{ matrix.image }}.sarif"